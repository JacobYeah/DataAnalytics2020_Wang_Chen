wine <- read.csv(file.choose())
wine
hist(wine)
hist(wine$fixed.acidity.volatile.acidity.citric.acid.residual.sugar.chlorides.free.sulfur.dioxide.total.sulfur.dioxide.density.pH.sulphates.alcohol.quality)
hist(wine$fixed)
wine
wine.head()
head(wine)
head(wine)
wine <- read.csv(file.choose())
head(wine)
hist(wine)
hist(wine$fixed.acidity)
hist(wine$as.numeric(fixed.acidity))
wine$fixed.acidity
wine <- read.csv(file.choose())
head(wine)
wine$fixed.acidity
wine <- read.csv(file.choose())
head(wine)
wine$fixed.acidity
hist(wine$fixed.acidity)
require(ggplot2)
p<-ggplot(data = wine, mapping = aes(x=value, y = count))
p+geom_histogram()
hist(wine$fixed.acidity)
p<-ggplot(data = wine)
p+geom_histogram()
p<-ggplot(data = wine, aes(x = wine.value))
p+geom_histogram()
p<-ggplot(data = wine, aes(x = wine$fixed.acidity))
p+geom_histogram()
wine.col.names
wine.col.names()
colnames(wine)
p<-ggplot(data = wine, aes(x = colnames(wine)))
p+geom_histogram()
colnames(wine)$value
colnames(wine)
p+geom_histogram()+facet_wrap(~ colnames(wine))
p<-ggplot(data = wine, mapping = aes(x=value,grouping(colnames(wine))))
p+geom_histogram()+facet_wrap(colnames(wine))
p<-ggplot(data = wine, mapping = aes(grouping(colnames(wine))))
p+geom_histogram()+facet_wrap(colnames(wine))
p<-ggplot(data = wine, mapping = aes(grouping(coln(wine))))
col(wine)
head(wine)
p<-ggplot(data = wine, mapping = aes(grouping(col(wine))))
p+geom_histogram()+facet_wrap(ï½žcol(wine))
p+geom_histogram()+facet_wrap(~col(wine))
p+geom_histogram()+
p+geom_histogram()
p<-ggplot(data = wine, mapping = aes(x=col(wine))
p<-ggplot(data = wine, mapping = aes(x=col(wine)))
p<-ggplot(data = wine, mapping = aes(x=col(wine)))
p+geom_histogram()
redwine <-read.csv(file.choose( "/Desktop/DA/HW7/winequality-red.csv"),header = T)
redwine <-read.csv(file.choose( "/Desktop/DA/HW7/winequality-red.csv"),header = T)
redwine$poor <- redwine$quality <= 4
redwine$okay <- redwine$quality == 5 |redwine$quality == 6
redwine$good <- redwine$quality >= 7
summary(redwine)
redwine
library(readr) # CSV file I/O, e.g. the read_csv function
library(read) # CSV file I/O, e.g. the read_csv function
library(lattice) #required for nearest neighbors
install.packages("FNN")
library(FNN) # nearest neighbors techniques
install.packages("pROC")
View(redwine)
dim(redwine)
redwine <- as.data.frame(redwine)
library(ggplot2)
library(tidyr)
install.packages(readr)
ggplot(gather(redwine, cols, value), aes(x = value)) +
geom_bar() + facet_grid(.~cols)
install.packages("readr")
install.packages("tidyr")
ggplot(gather(redwine, cols, value), aes(x = value)) +
geom_bar() + facet_grid(.~cols)
library(tidyr)
ggplot(gather(redwine, cols, value), aes(x = value)) +
geom_bar() + facet_grid(.~cols)
ggplot(gather(redwine), aes(value)) +
geom_bar() +
facet_wrap(~key, scales = 'free_x')
library(tidyr)
ggplot(gather(wine, cols, value), aes(x = value)) +
geom_bar() + facet_grid(.~cols)
ggplot(gather(wine), aes(value)) +
geom_bar() +
facet_wrap(~key, scales = 'free_x')
summary(wine$quality)
table(wine$quality)
bank <- read.csv(file.choose())
bank <- read.csv(file.choose(),sep = ";")
head(bank)
linear_quality = lm(quality ~ fixed.acidity+volatile.acidity+citric.acid+residual.sugar
+chlorides+free.sulfur.dioxide+total.sulfur.dioxide+density+pH+sulphates+
alcohol, data=wine)
summary(linear_quality)
linear_quality_1 = lm(quality ~ alcohol, data =wine)
summary(linear_quality_1)
linear_quality_4 = lm(quality ~ alcohol + volatile.acidity + citric.acid + sulphates, data = wine)
summary(linear_quality_4)
plot(wine$alcohol,wine$quality)
points(wine$alcohol,predict(linear_quality_4,redwine),col="blue")
points(wine$alcohol,predict(linear_quality_1,redwine),col="red")
knn10 = knn.reg(train=wine[,1:11], test=wine[,1:11], y=wine$quality, k =10)
knn20 = knn.reg(train=wine[,1:11],test=wine[,1:11], y = wine$quality, k=20)
plot(wine$alcohol,wine$quality)
points(wine$alcohol,knn10$pred,col="red")
points(wine$alcohol,knn20$pred,col="blue")
library(rpart)
tree <- rpart(good ~ alcohol + sulphates, data = redwine, method="class")
summary(tree)
library(rpart.plot)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
library(rpart.plot)
install.packages("rpart.plot")
install.packages("rpart.plot")
install.packages("rpart.plot")
library(rpart.plot)
library(rpart.plot)
install.packages("caret")
library(caret)
rpart.plot(tree)
library(rpart.plot)
install.packages("rpart")
library(rpart.plot)
wine <- read.csv(file.choose())
require(ggplot2)
library(rpart.plot)
library(caret)
rpart.plot(tree)
tree <- rpart(good ~ alcohol + sulphates, data = redwine, method="class")
library(rpart)
tree <- rpart(good ~ alcohol + sulphates, data = redwine, method="class")
library(rpart)
tree <- rpart(good ~ alcohol + sulphates, data = wine, method="class")
wine$poor <- redwine$quality <= 4
wine$okay <- redwine$quality == 5 |redwine$quality == 6
wine$good <- redwine$quality >= 7
wine$poor <- wine$quality <= 4
wine$okay <- wine$quality == 5 |wine$quality == 6
wine$good <- wine$quality >= 7
library(rpart)
tree <- rpart(good ~ alcohol + sulphates, data = wine, method="class")
summary(tree)
library(rpart.plot)
library(caret)
rpart.plot(tree)
pred <- predict(tree,newdata=wine,type="class")
summary(wine)
class_knn10 = knn(train=wine[,1:11], test=wine[,1:11], cl=wine$good, k =10)
knn10 = knn.reg(train=wine[,1:11], test=wine[,1:11], y=wine$quality, k =10)
library(FNN) # nearest neighbors techniques
library(pROC) # to make ROC curve
library(lattice) #required for nearest neighbors
knn10 = knn.reg(train=wine[,1:11], test=wine[,1:11], y=wine$quality, k =10)
knn20 = knn.reg(train=wine[,1:11],test=wine[,1:11], y = wine$quality, k=20)
plot(wine$alcohol,wine$quality)
points(wine$alcohol,knn10$pred,col="red")
points(wine$alcohol,knn20$pred,col="blue")
class_knn10 = knn(train=wine[,1:11], test=wine[,1:11], cl=wine$good, k =10)
class_knn20 = knn(train=wine[,1:11],test=wine[,1:11], cl = wine$good, k=20)
table(wine$good,class_knn10)
table(wine$good,class_knn20)
bank <- read.csv(file.choose(),sep = ";")
head(bank)
names(bank)
bank <- as.data.frame(bank)
summary(bank)
ggplot(gather(bank), aes(value)) +
geom_bar() +
facet_wrap(~key, scales = 'free_x')
library(tidyr)
ggplot(gather(bank), aes(value)) +
geom_bar() +
facet_wrap(~key, scales = 'free_x')
summary(bank$y)
CrossTable(bank$y)
library(readr)
install.packages("gmodels")
library(gmodels)
CrossTable(bank$y)
bank[,21]=gsub("yes",1,bank[,21])
bank[,21]=gsub("no",0,bank[,21])
lm1 <- lm(bank$y ~ bank$age +bank$duration  +bank$pdays +bank$previous  +bank$emp.var.rate
+bank$cons.price.idx +bank$cons.conf.idx)
summary(lm1)
sr <- 0.7
bank1 <- dim(bank)[1]
test.labels <- ceiling((1-sr)*bank1)
set.seed(2019)
training <- sample(1:bank1,sr*bank1,replace=F)
trains <- subset(bank[training,],select = c(age,duration,pdays,previous,emp.var.rate,cons.price.idx,cons.conf.idx,euribor3m,y))
train <- subset(bank[training,],select = c(age,duration,pdays,previous,emp.var.rate,cons.price.idx,cons.conf.idx,euribor3m,y))
testing <- sample(1:bank1,test.labels,replace = F)
test <- subset(bank[testing,],select = c(age,duration,pdays,previous,emp.var.rate,cons.price.idx,cons.conf.idx,euribor3m,y))
lm2 <- lm(trains$y ~ trains$age + trains$duration + trains$pdays + trains$previous + trains$emp.var.rate + trains$cons.price.idx)
summary(lm2)
"
"
accurate <- predict(lm2,test,interval="prediction")
head(accurate)
coef(lm2)
accurate.test <- as.data.frame(bank$y[testing])
accurate <- cbind(accurate.test,round(accurate))
names(accurate) <- c("trueaccurate","fit","lwrBound","uprBound")
head(accurate)
test.accuracy.rate <- count(accurate[which(accurate$trueaccurate == accurate$fit),])/dim(accurate)
test.accuracy.rate*100
help(count)
library(dplyr)
test.accuracy.rate <- count(accurate[which(accurate$trueaccurate == accurate$fit),])/dim(accurate)
accurate <- predict(lm2,test,interval="prediction")
accurate <- predict(lm2,test,interval="prediction")
sr <- 0.5
bank1 <- dim(bank)[1]
test.labels <- ceiling((1-sr)*bank1)
set.seed(2019)
training <- sample(1:bank1,sr*bank1,replace=F)
trains <- subset(bank[training,],select = c(age,duration,pdays,previous,emp.var.rate,cons.price.idx,cons.conf.idx,euribor3m,y))
train <- subset(bank[training,],select = c(age,duration,pdays,previous,emp.var.rate,cons.price.idx,cons.conf.idx,euribor3m,y))
testing <- sample(1:bank1,test.labels,replace = F)
test <- subset(bank[testing,],select = c(age,duration,pdays,previous,emp.var.rate,cons.price.idx,cons.conf.idx,euribor3m,y))
lm2 <- lm(trains$y ~ trains$age + trains$duration + trains$pdays + trains$previous + trains$emp.var.rate + trains$cons.price.idx)
summary(lm2)
accurate <- predict(lm2,test,interval="prediction")
head(accurate)
coef(lm2)
accurate.test <- as.data.frame(bank$y[testing])
accurate <- cbind(accurate.test,round(accurate))
names(accurate) <- c("trueaccurate","fit","lwrBound","uprBound")
head(accurate)
test.accuracy.rate <- count(accurate[which(accurate$trueaccurate == accurate$fit),])/dim(accurate)
test.accuracy.rate*100
library(kknn)
library(class)
install.packages('kknn')
library(kknn)
install.packages('igraph')
library(kknn)
install.packages('kknn')
library(kknn)
library(kknn)
library(class)
library(kknn)
library(class)
sprt <- 0.5
test.labels <- (1-sprt)*bank1
set.seed(2222)
training <- sample(1:bank1,sprt*bank1,replace = F)
train <- subset(bank[training,],select = c(age,duration,pdays,previous,emp.var.rate,cons.price.idx,cons.conf.idx,euribor3m,y))
testing <- sample(1:bank1,test.labels,replace = F)
test <- subset(bank[testing,],select = c(age,duration,pdays,previous,emp.var.rate,cons.price.idx,cons.conf.idx,euribor3m,y))
cg <- bank$y[training]
true.label <- bank$y[testing]
solution <- knn(train,test,cg,k=4)
solution <- as.numeric(as.character(solution))
answer <- as.data.frame(cbind(bnk$y[testing],solution))
answer <- as.data.frame(cbind(bank$y[testing],solution))
names(answer) <- c("true","knn")
head(answer)
accuracy <- count(answer[which(answer$true == answer$knn),])/dim(answer)[1]
accuracy*100
View(answer)
class(answer$true)
class(answer$knn)
names(bank)
mbank <- bank[,c(1,11,13,14,16,17,18,19,21)]
str(mbank)
View(bank)
View(mbank)
View(mbank[training,])
library(rpart)
library(rpart.plot)
bankModel1 <- rpart(y ~ .,data=mbank[training,],method="class")
bankModel1
rpart.plot(bankModel1,type = 3,fallen.leaves=T)
accuracy <- count(answer[which(answer$true == answer$knn),])/dim(answer)[1]
accuracy*100
View(answer)
fit <- predict(bankModel1,mbank[testing,-21],type = "class")
tree.result <- as.numeric(as.character(fit))
View(mbank[testing,])
test <- as.data.frame(test)
true.result <- as.numeric(as.character(test[,9]))
tree.out <- as.data.frame(cbind(true.result,tree.result))
accuracy_ <- (count(tree.out[which(tree.out$true.result == tree.out$tree.result),]))/dim(tree.out)[1]
accuracy_*100
